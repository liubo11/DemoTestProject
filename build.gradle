// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.1.3'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        jcenter()
        maven {
            url "http://10.134.2.1:8081/repository/maven-releases"

            //if need pwd
            /*credentials {
                username 'user'
                password 'secretpassword'
            }*/
        }

    }
}

tasks.each { task ->
    if (task.name.contains('AndroidTest') || task.name.contains('Release')) {
        task.enabled = false;
        task.project.logger.error "xxxddd " + task.name;
    }
}

class TimingsListener implements TaskExecutionListener, BuildListener {
    private Clock clock
    private timings = []

    @Override
    void beforeExecute(Task task) {
        clock = new org.gradle.util.Clock()
        if (task.outputs.files.files) {
            task.project.logger.warn "taskName:${task.name} "

            /*
            task.project.logger.warn "inputs.files.files:-----------start------- "
            task.inputs.files.files.each {
                task.project.logger.warn "${it.absolutePath} "
            }
            task.project.logger.warn "inputs.files.files: -----------end---------- "
            */
            task.project.logger.warn "inputs files size = "+task.inputs.files.files.size()
        }
    }
    @Override
    void afterExecute(Task task, TaskState taskState) {
        def ms = clock.timeInMs
        timings.add([ms, task.path])
        task.project.logger.warn "${task.path} took ${ms}ms"
        if(task.outputs.files.files) {
            task.project.logger.warn "taskName:${task.name}"

            /*
            task.project.logger.warn "outputs.files.files: ------------
start----------------- "
            task.outputs.files.files.each {
                task.project.logger.warn "${it.absolutePath} "
            }
            task.project.logger.warn "outputs.files.files: ---------------
end------------------ "
            */
            task.project.logger.warn "outputs files size = "+task.outputs.files.files.size()
        }
    }

    @Override
    void buildFinished(BuildResult result) {
        println "Task timings:"
        for (timing in timings) {
            if (timing[0] >= 50) {
                printf "%7sms  %s\n", timing
            }
        }
    }

    @Override
    void buildStarted(Gradle gradle) {
    }

    @Override
    void projectsEvaluated(Gradle gradle) {}

    @Override
    void projectsLoaded(Gradle gradle) {}

    @Override
    void settingsEvaluated(Settings settings) {}
}

gradle.addListener new TimingsListener()



/*task clean(type: Delete) {
    delete rootProject.buildDir
}*/
